// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/29/2019 10:20:17"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    UART
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module UART_vlg_sample_tst(
	CLOCK_50,
	KEY,
	SW,
	UART_RXD,
	sampler_tx
);
input  CLOCK_50;
input [3:2] KEY;
input [12:6] SW;
input  UART_RXD;
output sampler_tx;

reg sample;
time current_time;
always @(CLOCK_50 or KEY or SW or UART_RXD)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module UART_vlg_check_tst (
	HEX0,
	HEX1,
	LEDG,
	Uart_TxD,
	sampler_rx
);
input [0:6] HEX0;
input [0:6] HEX1;
input [7:6] LEDG;
input  Uart_TxD;
input sampler_rx;

reg [0:6] HEX0_expected;
reg [0:6] HEX1_expected;
reg [7:6] LEDG_expected;
reg  Uart_TxD_expected;

reg [0:6] HEX0_prev;
reg [0:6] HEX1_prev;
reg [7:6] LEDG_prev;
reg  Uart_TxD_prev;

reg  Uart_TxD_expected_prev;

reg  last_Uart_TxD_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	HEX0_prev = HEX0;
	HEX1_prev = HEX1;
	LEDG_prev = LEDG;
	Uart_TxD_prev = Uart_TxD;
end

// update expected /o prevs

always @(trigger)
begin
	Uart_TxD_expected_prev = Uart_TxD_expected;
end



// expected Uart_TxD
initial
begin
	Uart_TxD_expected = 1'bX;
end 
// generate trigger
always @(HEX0_expected or HEX0 or HEX1_expected or HEX1 or LEDG_expected or LEDG or Uart_TxD_expected or Uart_TxD)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected HEX0 = %b | expected HEX1 = %b | expected LEDG = %b | expected Uart_TxD = %b | ",HEX0_expected_prev,HEX1_expected_prev,LEDG_expected_prev,Uart_TxD_expected_prev);
	$display("| real HEX0 = %b | real HEX1 = %b | real LEDG = %b | real Uart_TxD = %b | ",HEX0_prev,HEX1_prev,LEDG_prev,Uart_TxD_prev);
`endif
	if (
		( Uart_TxD_expected_prev !== 1'bx ) && ( Uart_TxD_prev !== Uart_TxD_expected_prev )
		&& ((Uart_TxD_expected_prev !== last_Uart_TxD_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Uart_TxD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Uart_TxD_expected_prev);
		$display ("     Real value = %b", Uart_TxD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Uart_TxD_exp = Uart_TxD_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module UART_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK_50;
reg [3:2] KEY;
reg [12:6] SW;
reg UART_RXD;
// wires                                               
wire [0:6] HEX0;
wire [0:6] HEX1;
wire [7:6] LEDG;
wire Uart_TxD;

wire sampler;                             

// assign statements (if any)                          
UART i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK_50(CLOCK_50),
	.HEX0(HEX0),
	.HEX1(HEX1),
	.KEY(KEY),
	.LEDG(LEDG),
	.SW(SW),
	.UART_RXD(UART_RXD),
	.Uart_TxD(Uart_TxD)
);

// CLOCK_50
always
begin
	CLOCK_50 = 1'b0;
	CLOCK_50 = #2500 1'b1;
	#2500;
end 

// KEY[2]
initial
begin
	KEY[2] = 1'b1;
	KEY[2] = #12800000 1'b0;
	KEY[2] = #1280000 1'b1;
end 

// KEY[3]
initial
begin
	KEY[3] = 1'b1;
end 

// SW[6]
initial
begin
	SW[6] = 1'b1;
end 

// UART_RXD
initial
begin
	UART_RXD = 1'b1;
end 

UART_vlg_sample_tst tb_sample (
	.CLOCK_50(CLOCK_50),
	.KEY(KEY),
	.SW(SW),
	.UART_RXD(UART_RXD),
	.sampler_tx(sampler)
);

UART_vlg_check_tst tb_out(
	.HEX0(HEX0),
	.HEX1(HEX1),
	.LEDG(LEDG),
	.Uart_TxD(Uart_TxD),
	.sampler_rx(sampler)
);
endmodule

